{:rename-macros {}, :renames {}, :externs {Object {}}, :use-macros {go cljs.core.async.macros}, :excludes #{}, :name four-thirty-three-core.recorder, :imports nil, :requires {a cljs.core.async, cljs.core.async cljs.core.async, p four-thirty-three-core.protocols, four-thirty-three-core.protocols four-thirty-three-core.protocols, t cljs-time.core, cljs-time.core cljs-time.core, tc cljs-time.coerce, cljs-time.coerce cljs-time.coerce}, :uses nil, :defs {init-record-loop {:protocol-inline nil, :meta {:file "/Users/brendendoyle/Development/433/four-thirty-three-core/src/four_thirty_three_core/recorder.cljs", :line 8, :column 7, :end-line 8, :end-column 23, :arglists (quote ([output> period recording-length recorder]))}, :name four-thirty-three-core.recorder/init-record-loop, :variadic false, :file "/Users/brendendoyle/Development/433/four-thirty-three-core/src/four_thirty_three_core/recorder.cljs", :end-column 23, :method-params ([output> period recording-length recorder]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 4, :fn-var true, :arglists (quote ([output> period recording-length recorder]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:else :time-in-loop :timeout-length :recur :period :post-record-timeout-length :recording-length}, :order [:recur :period :recording-length :timeout-length :post-record-timeout-length :time-in-loop :else]}, :doc nil}